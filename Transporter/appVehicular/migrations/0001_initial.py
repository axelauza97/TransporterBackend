# Generated by Django 2.2.7 on 2021-01-26 04:39

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('cedula', models.CharField(max_length=10, null=True, unique=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typee', models.CharField(max_length=200)),
                ('date', models.DateField()),
                ('userID1', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='userID1', to=settings.AUTH_USER_MODEL)),
                ('userID2', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='userID2', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('idClient', models.AutoField(primary_key=True, serialize=False)),
                ('rateClient', models.IntegerField(blank=True, null=True)),
                ('userClient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('idCompany', models.AutoField(primary_key=True, serialize=False)),
                ('nameCompany', models.CharField(blank=True, max_length=45, null=True)),
                ('typeCompany', models.CharField(blank=True, max_length=45, null=True)),
                ('addressCompany', models.CharField(blank=True, max_length=45, null=True)),
                ('webpageCompany', models.CharField(blank=True, max_length=45, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('idDriver', models.AutoField(primary_key=True, serialize=False)),
                ('emailDriver', models.CharField(blank=True, max_length=100, null=True)),
                ('ciDriver', models.CharField(blank=True, max_length=10, null=True)),
                ('nameDriver', models.CharField(blank=True, max_length=30, null=True)),
                ('lnameDriver', models.CharField(blank=True, max_length=30, null=True)),
                ('birthdateDriver', models.DateTimeField(blank=True, null=True)),
                ('sexDriver', models.CharField(blank=True, max_length=10, null=True)),
                ('addressDriver', models.CharField(blank=True, max_length=100, null=True)),
                ('phoneDriver', models.CharField(blank=True, max_length=10, null=True)),
                ('cipictureDriver', models.CharField(blank=True, max_length=1000, null=True)),
                ('licenceDriver', models.CharField(blank=True, max_length=1000, null=True)),
                ('rateDriver', models.IntegerField(blank=True, null=True)),
                ('stateDriver', models.BooleanField(default=False)),
                ('activeDriver', models.BooleanField(default=False)),
                ('companyDriver', models.ForeignKey(db_column='idCompany', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='appVehicular.Company')),
                ('userDriver', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'drive',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Fare',
            fields=[
                ('idFare', models.AutoField(primary_key=True, serialize=False)),
                ('maxFare', models.IntegerField(blank=True, null=True)),
                ('priceFare', models.FloatField(blank=True, null=True)),
                ('idCompanyFare', models.ForeignKey(db_column='idCompany', on_delete=django.db.models.deletion.DO_NOTHING, to='appVehicular.Company')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('idLocation', models.AutoField(primary_key=True, serialize=False)),
                ('latitudeLocation', models.CharField(blank=True, max_length=20, null=True)),
                ('longitudeLocation', models.CharField(blank=True, max_length=20, null=True)),
                ('nameLocation', models.CharField(blank=True, max_length=200, null=True)),
                ('tokenLocation', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('idPayment', models.AutoField(primary_key=True, serialize=False)),
                ('typePayment', models.CharField(blank=True, max_length=45, null=True)),
                ('amountPayment', models.FloatField(blank=True, null=True)),
                ('driverneedPayment', models.FloatField(blank=True, null=True)),
                ('chargeamountPayment', models.FloatField(blank=True, null=True)),
                ('totalPayment', models.FloatField(blank=True, null=True)),
                ('datePayment', models.DateTimeField(blank=True, null=True)),
                ('tokenPayment', models.CharField(blank=True, max_length=200, null=True)),
                ('idFarePayment', models.ForeignKey(db_column='idFare', on_delete=django.db.models.deletion.DO_NOTHING, to='appVehicular.Fare')),
            ],
        ),
        migrations.CreateModel(
            name='Suggestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=255)),
                ('comment', models.CharField(max_length=255)),
                ('atendido', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='TypeService',
            fields=[
                ('idTypeService', models.AutoField(primary_key=True, serialize=False)),
                ('nameTypeService', models.CharField(blank=True, max_length=45, null=True)),
                ('descriptionTypeService', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('idVehicle', models.AutoField(primary_key=True, serialize=False)),
                ('plateVehicle', models.CharField(blank=True, max_length=10, null=True)),
                ('brandVehicle', models.CharField(blank=True, max_length=45, null=True)),
                ('modelVehicle', models.CharField(blank=True, max_length=45, null=True)),
                ('yearVehicle', models.IntegerField(blank=True, null=True)),
                ('colorVehicle', models.CharField(blank=True, max_length=45, null=True)),
                ('registrationVehicle', models.CharField(blank=True, max_length=1000, null=True)),
                ('plpictureVehicle', models.CharField(blank=True, max_length=1000, null=True)),
                ('pictureVehicle', models.CharField(blank=True, max_length=1000, null=True)),
                ('typeVehicle', models.CharField(blank=True, max_length=45, null=True)),
                ('typeServiceVehicle', models.ForeignKey(db_column='idTypeService', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='appVehicular.TypeService')),
                ('userVehicle', models.ForeignKey(db_column='idDriver', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='appVehicular.Driver')),
            ],
            options={
                'db_table': 'vehicle',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('idService', models.AutoField(primary_key=True, serialize=False)),
                ('driverScore', models.IntegerField(blank=True, null=True)),
                ('clientScore', models.IntegerField(blank=True, null=True)),
                ('startDate', models.DateTimeField(blank=True, null=True)),
                ('endDate', models.DateTimeField(blank=True, null=True)),
                ('isReservationService', models.BooleanField(blank=True, null=True)),
                ('stateService', models.IntegerField(choices=[(0, 'UNASSIGNED'), (1, 'ASSIGNED'), (2, 'EN CURSO'), (3, 'FINALIZADO'), (4, 'CANCELED')], default=0)),
                ('endidLocation', models.ForeignKey(db_column='idLocation', on_delete=django.db.models.deletion.DO_NOTHING, to='appVehicular.Location')),
                ('idClientService', models.ForeignKey(db_column='idClient', on_delete=django.db.models.deletion.DO_NOTHING, to='appVehicular.Client')),
                ('idDriverService', models.ForeignKey(blank=True, db_column='idDriver', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='appVehicular.Driver')),
                ('idPaymentService', models.ForeignKey(db_column='idPayment', on_delete=django.db.models.deletion.DO_NOTHING, to='appVehicular.Payment')),
                ('idTypeService', models.ForeignKey(db_column='idTypeService', on_delete=django.db.models.deletion.DO_NOTHING, to='appVehicular.TypeService')),
            ],
        ),
        migrations.CreateModel(
            name='Police',
            fields=[
                ('idPolice', models.AutoField(primary_key=True, serialize=False)),
                ('descriptionPolice', models.TextField(blank=True, null=True)),
                ('typePolice', models.CharField(blank=True, max_length=200, null=True)),
                ('companyPolice', models.ForeignKey(db_column='idCompany', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='appVehicular.Company')),
            ],
            options={
                'db_table': 'police',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sendDate', models.DateField()),
                ('content', models.CharField(max_length=200)),
                ('chat', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='appVehicular.Chat')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='fare',
            name='idTypeServiceFare',
            field=models.ForeignKey(db_column='idTypeService', on_delete=django.db.models.deletion.DO_NOTHING, to='appVehicular.TypeService'),
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Details',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=25)),
                ('service', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='appVehicular.Service')),
                ('user', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='appVehicular.Company'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
